stages:
  - test
  - security
  - build
  - deploy

variables:
  PYTHON_VERSION: "3.12"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# 缓存配置
cache:
  paths:
    - ~/.cache/pip
    - .venv/

# 测试阶段
test:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  services:
    - postgres:15
    - redis:7-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/test_db"
    SECRET_KEY: "test-secret-key-for-gitlab-ci"
    DEBUG: "true"
  before_script:
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest-cov pytest-asyncio httpx flake8 black isort
  script:
    - flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    - black --check app/ tests/
    - isort --check-only app/ tests/
    - pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week

# 安全扫描
security:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  before_script:
    - pip install bandit safety
  script:
    - bandit -r app/ -f json -o bandit-report.json || true
    - safety check --json --output safety-report.json || true
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week

# 构建阶段
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop
    - tags

# 部署到测试环境
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST "
      cd $STAGING_PATH &&
      docker-compose pull &&
      docker-compose up -d &&
      sleep 10 &&
      curl -f http://localhost:8000/health
      "
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - develop

# 部署到生产环境
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST "
      cd $PRODUCTION_PATH &&
      docker-compose pull &&
      docker-compose up -d &&
      sleep 10 &&
      curl -f http://localhost:8000/health
      "
  environment:
    name: production
    url: https://production.example.com
  only:
    - tags
  when: manual
