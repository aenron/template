name: Release Pipeline

on:
  push:
    tags: ["v*"]

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: gitea.example.com
  IMAGE_NAME: ${{ gitea.repository }}

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-asyncio httpx

      - name: Run tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ gitea.ref_name }} .
          docker build -t ${{ env.IMAGE_NAME }}:latest .

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run security scans
        run: |
          pip install bandit safety
          bandit -r app/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ gitea.ref_name }}
          path: |
            bandit-report.json
            safety-report.json

  push-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ gitea.actor }}
          password: ${{ secrets.GITEA_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ gitea.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [push-image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        run: |
          echo "Creating release for version ${{ gitea.ref_name }}"
          # 这里可以添加创建Gitea Release的逻辑
          # 或者使用Gitea API创建release

      - name: Generate changelog
        run: |
          echo "Generating changelog for version ${{ gitea.ref_name }}"
          # 这里可以添加生成changelog的逻辑

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [push-image]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ gitea.ref_name }} to production"
          # 这里可以添加生产环境部署逻辑
          # ssh user@production-server "cd /opt/fastapi-project && docker-compose pull && docker-compose up -d"

      - name: Health check
        run: |
          echo "Running health check..."
          sleep 10
          # curl -f https://production.example.com/health

      - name: Notify deployment
        run: |
          echo "Production deployment of version ${{ gitea.ref_name }} completed successfully!"
          # 这里可以添加通知逻辑

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()

    steps:
      - name: Notify success
        if: needs.create-release.result == 'success' && needs.deploy-production.result == 'success'
        run: |
          echo "Release ${{ gitea.ref_name }} completed successfully!"
          # 发送成功通知

      - name: Notify failure
        if: needs.create-release.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "Release ${{ gitea.ref_name }} failed!"
          # 发送失败通知
