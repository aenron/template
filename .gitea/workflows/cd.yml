name: CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: gitea.example.com
  IMAGE_NAME: ${{ gitea.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ gitea.actor }}
          password: ${{ secrets.GITEA_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: gitea.ref == 'refs/heads/main' || gitea.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # 这里可以添加实际的部署脚本
          # 例如：SSH到服务器，拉取最新镜像，重启服务等
          # ssh user@staging-server "cd /opt/fastapi-project && docker-compose pull && docker-compose up -d"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # 这里可以添加健康检查测试
          # curl -f https://staging.example.com/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(gitea.ref, 'refs/tags/v') || gitea.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # 这里可以添加实际的部署脚本
          # ssh user@production-server "cd /opt/fastapi-project && docker-compose pull && docker-compose up -d"

      - name: Run production tests
        run: |
          echo "Running production tests..."
          # 这里可以添加生产环境的测试
          # curl -f https://production.example.com/health

      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully!"
          # 这里可以添加通知逻辑（Slack、邮件等）

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: failure()
    environment: production

    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # 这里可以添加回滚逻辑
          # ssh user@production-server "cd /opt/fastapi-project && docker-compose down && docker-compose up -d"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "Deployment completed successfully!"
          # 发送成功通知

      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "Deployment failed!"
          # 发送失败通知
